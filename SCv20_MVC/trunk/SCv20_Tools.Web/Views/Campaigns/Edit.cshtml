@model SCv20_Tools.Web.Models.CampaignModel
@{ ViewBag.Title = "Edit Campaign"; }

@using (Html.BeginForm()) { 
    <div class="form ">
        @Html.HiddenFor(m => m.Id)

        <div class="group">
            <div class="grid-1">
                @Html.LabelFor(m => m.Name)
            </div>
            <div class="grid-4">
                @Html.MeHZ().TextBoxFor(m => m.Name, new TextBoxOptions { MaxLength = 100, AutoFocus = true })
            </div>
            <div class="grid-1">
                @Html.LabelFor(m => m.StartingLevel)

            </div>
            <div class="grid-1">
                @Html.MeHZ().TextBoxFor(m => m.StartingLevel)
            </div>

        </div>


        <div class="group">
            <div class="grid-1">
                @Html.LabelFor(m => m.BaseReputation)
            </div>
            <div class="grid-1">
                @Html.MeHZ().TextBoxFor(m => m.BaseReputation)
            </div>

            <div class="grid-1">
                @Html.LabelFor(m => m.BaseNetWorth)
            </div>
            <div class="grid-2">
                @Html.MeHZ().TextBoxFor(m => m.BaseNetWorth)
            </div>

            <div class="grid-1">
                @Html.LabelFor(m => m.BaseXPFormatted)
            </div>
            <div class="grid-1">
                @Html.MeHZ().TextBoxFor(m => m.BaseXPFormatted, new TextBoxOptions { Disabled = true })
            </div>
        </div>

        <div class="group">
            <div class="grid-1">
                @Html.LabelFor(m => m.YearDetails)
            </div>
            <div class="grid-1">
                @Html.MeHZ().DropDownListFor(m => m.SelectedYearId, m => m.ListHistoricalConversions, "Id", "Year", new DropDownListOptions { FirstItemText = "-- Selecione --", FirstItemValue = "0" })
            </div>
            <div class="grid-3">
                @Html.MeHZ().TextBoxFor(m => m.YearDetails, new TextBoxOptions { MaxLength = 100 })
            </div>
            <div class="grid-1">
                @Html.LabelFor(m => m.BaseNetWorthFormatted, "Networth")
            </div>
            <div class="grid-1">
                @Html.MeHZ().TextBoxFor(m => m.BaseNetWorthFormatted, new TextBoxOptions { Disabled = true })
            </div>
        </div>

        <div class="group">
            <div class="grid-1">
                @Html.LabelFor(m => m.Concept)
            </div>
            <div class="grid-4">
                @Html.MeHZ().TextAreaFor(m => m.Concept, null)
            </div>
            <div class="grid-1">
                @Html.LabelFor(m => m.CreatedOn)
            </div>
            <div class="grid-1">
                @Html.MeHZ().TextBoxFor(m => m.CreatedOn, new TextBoxOptions { Disabled = true })
            </div>
        </div>

        <div class="group">&nbsp;</div>

        <div class="group">
            <div class="grid-1">
                @Html.LabelFor(m => m.ListAvaliableQualities)
            </div>
            <div class="grid-2" id="avaliableQualities">
                @Html.MeHZ().DropDownListFor(m => m.SelectedQualityId, ds => ds.ListAvaliableQualities, "Id", "Name", null)
            </div>

            <div class="grid-1 al-l">
                <button type="button" value="add-quality" id="btnAddQuality">Add Quality</button>
            </div>
            <div class="grid-1 al-c">
                <label for="txtQualityBonusAD">AD/XP Bonus</label>
            </div>
            <div class="grid-1">
                <input type="text" id="txtQualityBonusAD" disabled="disabled" />
            </div>

            <div class="grid-1">
                <input type="text" id="txtQualityBonusXP" disabled="disabled" />
            </div>
        </div>

        <div class="group">
            <div class="grid-1">
                <label for="txtQualityDetails">Description</label>
            </div>
            <div class="grid-6">
                <textarea id="txtQualityDetails" disabled="disabled" style="height: 5em"></textarea>
            </div>

        </div>
    </div>
    
    <div id="xpto">...</div>
    
    <div id="qualityList"></div>
}


<script type="text/javascript">
    /// <reference path="/content/scripts/jquery/jquery-1.7.1.min.js" />
    /// <reference path="/areas/api/scripts/quality.api.js" />
    /// <reference path="/areas/api/scripts/campaign.api.js" />
    /// <reference path="/content/scripts/util.js" />
    $(function () {
        $('#avaliableQualities')
            .on("change keyup", "#@Html.IdFor(m => m.SelectedQualityId)", getQualityDetails);

        $('#qualityList')
            .on("click", ".remove", removeQuality);

        $('#btnAddQuality').click(addQuality);

        updateList();
        updateAvaliableQualities();
    });


    /// Updates the quality list.
    function updateList() {
        var api = new campaignApi();
        var cid = $('#Id').val();
        api.getQualities(cid, function (data) {
            if (data.done) {
                var x = $("#qualityList").tmpl("#qualityListTmpl", data.ds);
            }
        });
    }


    /// Updates the avaliable qualities for campaign.
    function updateAvaliableQualities() {
        var cid = $('#Id').val();
        var api = new campaignApi();

        api.getAvaliable(cid, function (data) {
            if (data.done) {
                $("#avaliableQualities").tmpl("#avaliableQualitiesTmpl", data.ds);
            }
        });
    }


    /// Gets the selected quality details.
    function getQualityDetails(e) {
        var id = $(this).val();
        if (id == 0) {
            $("#btnAddQuality").attr("disabled", "disabled");
        } else {
            $("#btnAddQuality").removeAttr("disabled");
        }
        var api = new qualityApi();
        api.getDetails(id, function (data) {
            $("#txtQualityBonusAD").val(data.bonusADFormated);
            $("#txtQualityBonusXP").val(data.bonusXPFormated);
            $("#txtQualityDetails").html(data.description);
        });
    }


    /// Adds the selected quality to campaign.
    function addQuality() {
        var api = new campaignApi();
        var sel = $('#@Html.IdFor(m => m.SelectedQualityId)');

        var cid = $('#Id').val();
        var qid = sel.val();

        api.addQuality(cid, qid, function (data) {
            if (data.done) {
                var idx = sel[0].selectedIndex;

                $('#@Html.IdFor(m => m.SelectedQualityId) option:selected').remove();

                updateList();

                //updateAvaliableQualities();
                //sel = $('#@Html.IdFor(m => m.SelectedQualityId)');

                sel[0].selectedIndex = sel[0].length == 1 ? 0 : idx;
                sel.focus();
                sel.change();


            }
        });
    }

    /// Handles Quality list remove command. 
    function removeQuality() {
        var cid = $('#Id').val();
        var qid = $(this).data('id');
        var api = new campaignApi();
        var row = $(this).closest('tr');

        api.removeQuality(cid, qid, function (data) {
            if (data.done) {
                updateList();
                updateAvaliableQualities();
            }
        });
    };
</script>


<script type="text/template" id="qualityListTmpl">
    @Html.Partial("_qualityListTmpl")
</script>

<script type="text/template" id="avaliableQualitiesTmpl">
    <select id="SelectedQualityId" name="SelectedQualityId">
        <option value="0">-- Please Select --</option>
        {{~it: value: index}}
            <option value="{{=value.id}}">{{=value.name}}</option>
        {{~}}
    </select>
</script>
